"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const sass = require('node-sass');
const tmp = require('tmp');
const fs = require('fs');
const pathUtils = require('path');
const program = require('commander');
const chokidar = require('chokidar');
const TsTypeInfo = require('ts-type-info');
//  import styles from './test/test.scss'; 
//  styles.
let DtsCreator = require('typed-css-modules');
let find = require('find');
function getDestFileName(filename) {
    return filename + '.d.ts';
}
function processFile(filename) {
    return __awaiter(this, void 0, void 0, function* () {
        let tmpFile = tmp.fileSync();
        let destFileName = getDestFileName(filename);
        console.log(`Parsing file ${filename} to ${destFileName}`);
        try {
            let parsed = sass.renderSync({ file: filename, outFile: tmpFile.name });
            let css = (new Buffer(parsed.css)).toString();
            fs.writeFileSync(tmpFile.name, css);
            let cssToDtsConverter = new DtsCreator();
            let content = yield cssToDtsConverter.create(tmpFile.name);
            let tokens = content.rawTokenList;
            let typings = TsTypeInfo.createFile();
            typings.addClasses({
                name: 'Styles',
                isExported: true,
                isDefaultExportOfFile: true,
                isAmbient: true,
                isNamedExportOfFile: true,
                hasDeclareKeyword: true,
                properties: tokens.map(token => ({ name: `'${token}'`, type: 'string' })),
                onAfterWrite: writer => {
                    writer.writeLine(``);
                    writer.writeLine(`declare var style: Styles`);
                    writer.writeLine(`export = style;`);
                }
            });
            fs.writeFileSync(destFileName, typings.write());
        }
        catch (e) {
            console.error(e);
            throw e;
        }
        finally {
            tmpFile.removeCallback();
        }
    });
}
program
    .version('1.0.0')
    .option('-d, --dir [root]', 'set root directory')
    .option('-m, --match [regex]', 'set files regex', '^[^_].+\\.scss$')
    .option('-w, --watch', 'watch mode')
    .parse(process.argv);
let workingDirectory = pathUtils.join(process.cwd(), program['dir'] || '');
let match = new RegExp(program['match']);
let files = find.fileSync(match, workingDirectory);
files.reduce((previous, current) => previous.then(() => processFile(current)).catch(e => { }), Promise.resolve())
    .then(() => {
    console.log('completed');
})
    .catch(e => {
    console.error(e);
    throw e;
})
    .then(() => {
    if (program['watch']) {
        let watcher = chokidar.watch('*', { cwd: workingDirectory });
        watcher
            .on('add', path => {
            if (match.test(path)) {
                processFile(pathUtils.join(workingDirectory, path));
            }
        })
            .on('change', path => {
            if (match.test(path)) {
                processFile(pathUtils.join(workingDirectory, path));
            }
        })
            .on('unlink', path => {
            if (match.test(path)) {
                let destFileName = getDestFileName(pathUtils.join(workingDirectory, path));
                if (fs.existsSync(destFileName)) {
                    fs.unlinkSync(destFileName);
                }
            }
        });
        let watched = watcher.getWatched();
    }
});
//# sourceMappingURL=data:application/json;base64,