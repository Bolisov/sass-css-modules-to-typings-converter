"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const sass = require('node-sass');
const tmp = require('tmp');
const fs = require('fs');
const pathUtils = require('path');
const program = require('commander');
const chokidar = require('chokidar');
let inputFileName = './test.scss';
let DtsCreator = require('typed-css-modules');
let find = require('find');
function getDestFileName(filename) {
    return filename + '.d.ts';
}
function processFile(filename) {
    return __awaiter(this, void 0, void 0, function* () {
        let tmpFile = tmp.fileSync();
        let destFileName = getDestFileName(filename);
        console.log(`Parsing file ${filename} to ${destFileName}`);
        try {
            let parsed = sass.renderSync({ file: filename, outFile: tmpFile.name });
            let css = (new Buffer(parsed.css)).toString();
            fs.writeFileSync(tmpFile.name, css);
            let cssToDtsConverter = new DtsCreator();
            let content = yield cssToDtsConverter.create(tmpFile.name);
            fs.writeFileSync(destFileName, content.formatted);
        }
        catch (e) {
            console.error(e);
            throw e;
        }
        finally {
            tmpFile.removeCallback();
        }
    });
}
program
    .version('1.0.0')
    .option('-d, --dir [root]', 'set root directory')
    .option('-m, --match [regex]', 'set files regex', '\\.scss$')
    .option('-w, --watch', 'watch mode')
    .parse(process.argv);
let workingDirectory = pathUtils.join(process.cwd(), program['dir'] || '');
let match = new RegExp(program['match']);
let files = find.fileSync(match, workingDirectory);
files.reduce((previous, current) => previous.then(() => processFile(current)).catch(e => { }), Promise.resolve())
    .then(() => {
    console.log('completed');
})
    .catch(e => {
    console.error(e);
    throw e;
})
    .then(() => {
    if (program['watch']) {
        let watcher = chokidar.watch('*', { cwd: workingDirectory });
        watcher
            .on('add', path => {
            if (match.test(path)) {
                processFile(path);
            }
        })
            .on('change', path => {
            if (match.test(path)) {
                processFile(path);
            }
        })
            .on('unlink', path => {
            if (match.test(path)) {
                let destFileName = getDestFileName(path);
                if (fs.existsSync(destFileName)) {
                    fs.unlinkSync(getDestFileName(path));
                }
            }
        });
        let watched = watcher.getWatched();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFZLElBQUksV0FBTSxXQUFXLENBQUMsQ0FBQTtBQUNsQyxNQUFZLEdBQUcsV0FBTSxLQUFLLENBQUMsQ0FBQTtBQUMzQixNQUFZLEVBQUUsV0FBTSxJQUFJLENBQUMsQ0FBQTtBQUN6QixNQUFZLFNBQVMsV0FBTSxNQUFNLENBQUMsQ0FBQTtBQUNsQyxNQUFZLE9BQU8sV0FBTSxXQUFXLENBQUMsQ0FBQTtBQUNyQyxNQUFZLFFBQVEsV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUVyQyxJQUFJLGFBQWEsR0FBRyxhQUFhLENBQUE7QUFDakMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTNCLHlCQUF5QixRQUFnQjtJQUNyQyxNQUFNLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUM5QixDQUFDO0FBRUQscUJBQTJCLFFBQWdCOztRQUN2QyxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDN0IsSUFBSSxZQUFZLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLFFBQVEsT0FBTyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRTNELElBQUksQ0FBQztZQUNELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN4RSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzlDLEVB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SUFBSSxDQUFDLENBQUM7Z0JBRXpDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM5QixFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2dCQUN4QyxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRVAsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNhc3MgZnJvbSAnbm9kZS1zYXNzJztcclxuaW1wb3J0ICogYXMgdG1wIGZyb20gJ3RtcCc7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0ICogYXMgcGF0aFV0aWxzIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XHJcbmltcG9ydCAqIGFzIGNob2tpZGFyIGZyb20gJ2Nob2tpZGFyJztcclxuXHJcbmxldCBpbnB1dEZpbGVOYW1lID0gJy4vdGVzdC5zY3NzJ1xyXG5sZXQgRHRzQ3JlYXRvciA9IHJlcXVpcmUoJ3R5cGVkLWNzcy1tb2R1bGVzJyk7XHJcbmxldCBmaW5kID0gcmVxdWlyZSgnZmluZCcpO1xyXG5cclxuZnVuY3Rpb24gZ2V0RGVzdEZpbGVOYW1lKGZpbGVuYW1lOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBmaWxlbmFtZSArICcuZC50cyc7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NGaWxlKGZpbGVuYW1lOiBzdHJpbmcpIHtcclxuICAgIGxldCB0bXBGaWxlID0gdG1wLmZpbGVTeW5jKCk7XHJcbiAgICBsZXQgZGVzdEZpbGVOYW1lID0gZ2V0RGVzdEZpbGVOYW1lKGZpbGVuYW1lKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgUGFyc2luZyBmaWxlICR7ZmlsZW5hbWV9IHRvICR7ZGVzdEZpbGVOYW1lfWApO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IHBhcnNlZCA9IHNhc3MucmVuZGVyU3luYyh7IGZpbGU6IGZpbGVuYW1lLCBvdXRGaWxlOiB0bXBGaWxlLm5hbWUgfSk7XHJcbiAgICAgICAgbGV0IGNzcyA9IChuZXcgQnVmZmVyKHBhcnNlZC5jc3MpKS50b1N0cmluZygpO1xyXG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmModG1wRmlsZS5uYW1lLCBjc3MpO1xyXG4gICAgICAgIGxldCBjc3NUb0R0c0NvbnZlcnRlciA9IG5ldyBEdHNDcmVhdG9yKCk7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBhd2FpdCBjc3NUb0R0c0NvbnZlcnRlci5jcmVhdGUodG1wRmlsZS5uYW1lKTtcclxuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGRlc3RGaWxlTmFtZSwgY29udGVudC5mb3JtYXR0ZWQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0bXBGaWxlLnJlbW92ZUNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbnByb2dyYW1cclxuICAgIC52ZXJzaW9uKCcxLjAuMCcpXHJcbiAgICAub3B0aW9uKCctZCwgLS1kaXIgW3Jvb3RdJywgJ3NldCByb290IGRpcmVjdG9yeScpXHJcbiAgICAub3B0aW9uKCctbSwgLS1tYXRjaCBbcmVnZXhdJywgJ3NldCBmaWxlcyByZWdleCcsICdcXFxcLnNjc3MkJylcclxuICAgIC5vcHRpb24oJy13LCAtLXdhdGNoJywgJ3dhdGNoIG1vZGUnKVxyXG4gICAgLnBhcnNlKHByb2Nlc3MuYXJndik7XHJcblxyXG5sZXQgd29ya2luZ0RpcmVjdG9yeSA9IHBhdGhVdGlscy5qb2luKHByb2Nlc3MuY3dkKCksIHByb2dyYW1bJ2RpciddIHx8ICcnKTtcclxubGV0IG1hdGNoID0gbmV3IFJlZ0V4cChwcm9ncmFtWydtYXRjaCddKTtcclxubGV0IGZpbGVzOiBzdHJpbmdbXSA9IGZpbmQuZmlsZVN5bmMobWF0Y2gsIHdvcmtpbmdEaXJlY3RvcnkpO1xyXG5cclxuZmlsZXMucmVkdWNlPFByb21pc2U8dm9pZD4+KChwcmV2aW91cywgY3VycmVudCkgPT4gcHJldmlvdXMudGhlbigoKSA9PiBwcm9jZXNzRmlsZShjdXJyZW50KSkuY2F0Y2goZSA9PiB7IH0pLCBQcm9taXNlLnJlc29sdmUoKSlcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnY29tcGxldGVkJyk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH0pXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgaWYgKHByb2dyYW1bJ3dhdGNoJ10pIHtcclxuICAgICAgICAgICAgbGV0IHdhdGNoZXIgPSBjaG9raWRhci53YXRjaCgnKicsIHsgY3dkOiB3b3JraW5nRGlyZWN0b3J5IH0pO1xyXG5cclxuICAgICAgICAgICAgd2F0Y2hlclxyXG4gICAgICAgICAgICAgICAgLm9uKCdhZGQnLCBwYXRoID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gudGVzdChwYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRmlsZShwYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm9uKCdjaGFuZ2UnLCBwYXRoID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gudGVzdChwYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRmlsZShwYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm9uKCd1bmxpbmsnLCBwYXRoID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gudGVzdChwYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVzdEZpbGVOYW1lID0gZ2V0RGVzdEZpbGVOYW1lKHBhdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZGVzdEZpbGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnMudW5saW5rU3luYyhnZXREZXN0RmlsZU5hbWUocGF0aCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGxldCB3YXRjaGVkID0gd2F0Y2hlci5nZXRXYXRjaGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7Il19